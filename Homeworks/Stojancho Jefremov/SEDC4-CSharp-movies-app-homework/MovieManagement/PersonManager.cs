using MovieClasses;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MovieManagement
{
    public class PersonManager
    {
        private List<Person> persons = new List<Person>();

        private static int lastPersonID = 30;

        public PersonManager()
        {
            Reset();
        }

        public void Reset()
        {
            persons = GetDefaultPersons();
        }

        private List<Person> GetDefaultPersons()
        {
            return new List<Person>
            {
                new Person { ID = 1, FirstName = "Francis", LastName = "Ford Coppola" },
                new Person { ID = 2, FirstName = "Martin", LastName = "Sheen" },
                new Person { ID = 3, FirstName = "Robert", LastName = "Duval"},
                new Person { ID = 4, FirstName = "Dennis", LastName = "Hopper"},
                new Person { ID = 5, FirstName = "Marlon", LastName = "Brando"},
                new Person { ID = 6, FirstName = "John", LastName = "Travolta" },
                new Person { ID = 7, FirstName = "Samuel", LastName = "Jackson" },
                new Person { ID = 8, FirstName = "Bruce", LastName = "Willis" },
                new Person { ID = 9, FirstName = "Quentin", LastName="Tarantino"},
                new Person { ID = 10, FirstName = "Brad", LastName = "Pitt" },
                new Person { ID = 11, FirstName = "Edward", LastName = "Norton" },
                new Person { ID = 12, FirstName = "Helena", LastName = "Bonham Carter" },
                new Person { ID = 13, FirstName = "David", LastName = "Fincher" },
                new Person { ID = 14, FirstName = "Dragan", LastName = "Bjelogrlic" },
                new Person { ID = 15, FirstName = "Nikola", LastName = "Kojo" },
                new Person { ID = 16, FirstName = "Zoran", LastName = "Cvijanovic" },
                new Person { ID = 17, FirstName = "Tim", LastName = "Robbins" },
                new Person { ID = 18, FirstName = "Morgan", LastName = "Freemen" },
                new Person { ID = 19, FirstName = "Bob", LastName = "Gunton" },
                new Person { ID = 20, FirstName = "Kevin", LastName = "Spacey" },
                new Person { ID = 21, FirstName = "Chazz", LastName = "Palminteri" },
                new Person { ID = 22, FirstName = "Gabriel", LastName = "Byrne" },
                new Person { ID = 23, FirstName = "Woody", LastName = "Harrelson" },
                new Person { ID = 24, FirstName = "Juliette", LastName = "Lewis" },
                new Person { ID = 25, FirstName = "Tom", LastName = "Sizemore" },
                new Person { ID = 26, FirstName = "Robert", LastName = "Downey Jr" },
                new Person { ID = 27, FirstName = "Srdjan", LastName = "Dragojevic" },
                new Person { ID = 28, FirstName = "Frank", LastName = "Darabond" },
                new Person { ID = 29, FirstName = "Bryan", LastName = "Singer" },
                new Person { ID = 30, FirstName = "Oliver", LastName = "Stone" },
            };
        }

        internal Person GetPersonById(int id)
        {
            foreach (var person in persons)
            {
                if (person.ID == id)
                    return person;
            }
            return null;
        }

        internal Person GetPerson(string firstName, string lastName)
        {
            foreach (var person in persons)
            {
                if ((person.FirstName == firstName) && (person.LastName == lastName))
                    return person;
            }
            return null;
        }

        public void AddPerson(Person person)
        {
            if (person.ID > 0)
            {
                if (persons.Select(p => p.ID).Contains(person.ID))
                {
                    throw new Exception($"Person with ID {person.ID} is already existing! You can leave ID to be generated by PersonManager class. ");
                }
            }
            else
            {
                person.ID = getNewPersonID();
            }
            persons.Add(person);
        }

        private int getNewPersonID()
        {

            var newID = ++lastPersonID;
            while ((persons.Select(p => p.ID).Contains(newID)))
            {
                newID = ++lastPersonID;
            }
            return newID;
        }

        public List<Person> GetAllPersons()
        {
            return persons;
        }

        public List<Person> GetAllMales()
        {
            throw new NotImplementedException();
        }

        public List<Person> GetAllFemales()
        {
            throw new NotImplementedException();
        }

        public List<Person> GetAllLiving()
        {
            throw new NotImplementedException();
        }

    }
}
